Undirected Graph Cycle
Difficulty: MediumAccuracy: 30.13%Submissions: 656K+Points: 4Average Time: 20m
Given an undirected graph with V vertices and E edges, represented as a 2D vector edges[][], where each entry edges[i] = [u, v] denotes an edge between vertices u and v, determine whether the graph contains a cycle or not.
Note: The graph can have multiple component.
Examples:
Input: V = 4, E = 4, edges[][] = [[0, 1], [0, 2], [1, 2], [2, 3]]
Output: true
Explanation:  
1 -> 2 -> 0 -> 1 is a cycle.

class Solution {
    public boolean isCycle(int V, int[][] edges) {
        
        ArrayList<ArrayList<Integer>> adj=new ArrayList<>();
        for(int i=0;i<V;i++){
            adj.add(new ArrayList<>());
        }
        
        for(int i=0;i<edges.length;i++){
                int u=edges[i][0];
                int v=edges[i][1];
                adj.get(u).add(v);
                adj.get(v).add(u);
        }
        boolean visited[]=new boolean[V];
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                if(dfs(adj,visited,-1,i)){
                    return true;
                }
            }
        }
        return false;
        
    }
    
    public static boolean dfs(ArrayList<ArrayList<Integer>> adj,boolean visited[],int p,int i){
        visited[i]=true;
        for(int n:adj.get(i)){
            if(!visited[n]){
                if(dfs(adj,visited,i,n)){
                    return true; //already visited
                }
            }
            else{
                if(n!=p){
                    return true;
                }
            }
        }
        return false;
    }
}
