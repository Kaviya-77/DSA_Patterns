/***Problem statement
You are given a sorted array 'arr' of distinct values and a target value 'm'. You need to search for the index of the target value in the array.
Note:
1. If the value is present in the array, return its index.
2. If the value is absent, determine the index where it would be inserted in the array while maintaining the sorted order. 
3. The given array has distinct integers.
4. The given array may be empty.
Example:
Input:  arr = [1, 2, 4, 7],  m = 6 
Output: 3
Explanation: If the given array 'arr' is: [1, 2, 4, 7] and m = 6. We insert m = 6 in the array and get 'arr' as: [1, 2, 4, 6, 7]. The position of 6 is 3 (according to 0-based indexing)
Sample Input 1:
4 9
1 2 4 7
Sample Output 1:
4
Explanation of Input 1:
The given array 'arr' is: [1, 2, 4, 7] and m = 9. We insert m = 9 in the array and get 'arr' as: [1, 2, 4, 7, 9]. The position of 9 is 4 (according to 0-based indexing).***/


////////////// Intuition ///////////////////
Binary search narrows the range where m could exist.
Every step either moves start right or end left.
When the loop ends, it means
ðŸ‘‰ start has crossed end (start > end) â€”
i.e., no exact match found.
At that point:
end points to the last smaller element.
start points to the first larger or equal element.
Therefore, start is exactly where m should be inserted
(either at the beginning, in the middle, or at the end).

âœ… If m is smaller than all â†’ start = 0
âœ… If m is larger than all â†’ start = arr.length
âœ… If m fits between elements â†’ start points right spot.
//////////////////////////////////////////////////////



public class Solution {
    public static int searchInsert(int [] arr, int m){
        int start=0;
        int end=arr.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(arr[mid]==m){
                return mid;
            }
            else if(arr[mid]>m){
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
         return start;
    }
}
