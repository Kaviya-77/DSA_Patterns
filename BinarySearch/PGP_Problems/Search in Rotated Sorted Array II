/***There is an integer array nums sorted in non-decreasing order (not necessarily with distinct values).Given the array nums after the rotation and an integer target, return true if target is in nums, or false if it is not in nums.
You must decrease the overall operation steps as much as possible.
Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true
Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false***/

//////////Intution////////////
Use binary search — still valid even though array is rotated.
Check mid == target → if yes, return true.
If duplicates block decision (nums[start] == nums[mid] == nums[end]),
shrink the range → start++, end--.
Otherwise, find sorted half:
If nums[start] <= nums[mid], left side sorted → check if target lies there.
Else, right side sorted → check if target lies there.
Move start/end accordingly until found or range ends → return false.

When duplicates confuse, skip them;
else, find the sorted half and move towards the target.
/////////////////////////////////


class Solution {
    public boolean search(int[] nums, int target) {
        int start=0;
        int end=nums.length-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(nums[mid]==target){
                return true;
            }
             // Handle duplicates
            if (nums[start] == nums[mid] && nums[mid] == nums[end]) {
                start++;
                end--;
                continue;
            }
            else if(nums[start]<=nums[mid]){  //left is sorted
                if(nums[start]<=target && target<nums[mid]){
                      end=mid-1;
                   }
                    else{
                        start=mid+1;
                    }
                }
                else{  //rigth is sorted
                    if(nums[mid] < target && target <= nums[end]){
                        ///right side
                         start=mid+1;
                    }
                    else{
                        end=mid-1;
                    }
                }
            }
        
        return false;  
    }
}
